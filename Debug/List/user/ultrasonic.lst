###############################################################################
#
# IAR ANSI C/C++ Compiler V9.30.1.335/W64 for ARM         29/Nov/2022  22:51:26
# Copyright 1999-2022 IAR Systems AB.
#
#    Cpu mode          =  thumb
#    Endian            =  little
#    Source file       =  C:\embedded\project\user\ultrasonic.c
#    Command line      =
#        -f C:\embedded\project\Debug\Obj\user\ultrasonic.o.rsp
#        (C:\embedded\project\user\ultrasonic.c -D USE_STDPERIPH_DRIVER -D
#        STM32F10X_CL -lC C:\embedded\project\Debug\List\user -o
#        C:\embedded\project\Debug\Obj\user --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_clustering --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files\IAR Systems\Embedded Workbench
#        9.1\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\embedded\project\Libraries\CMSIS\DeviceSupport\ -I
#        C:\embedded\project\Libraries\CMSIS\DeviceSupport\Startup\ -I
#        C:\embedded\project\Libraries\STM32F10x_StdPeriph_Driver_v3.5\inc\ -I
#        C:\embedded\project\Libraries\STM32F10x_StdPeriph_Driver_v3.5\src\ -I
#        C:\embedded\project\Libraries\LCD\ -I C:\embedded\project\user\ -I
#        C:\embedded\project\user\inc\ -Ol -I "C:\Program Files\IAR
#        Systems\Embedded Workbench 9.1\arm\CMSIS\Core\Include\\")
#        --dependencies=n C:\embedded\project\Debug\Obj\user\ultrasonic.o.d
#    Locale            =  C
#    List file         =  C:\embedded\project\Debug\List\user\ultrasonic.lst
#    Object file       =  C:\embedded\project\Debug\Obj\user\ultrasonic.o
#    Runtime model:       
#      __CPP_Runtime   =  1
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#      __size_limit    =  32768|ARM.EW.LINKER
#
###############################################################################

C:\embedded\project\user\ultrasonic.c
      1          #include "ultrasonic.h"
      2          #include "stm32f10x.h"
      3          #include "stm32f10x_rcc.h"
      4          #include "stm32f10x_gpio.h"
      5          
      6          
      7          
      8          /**
      9           *   How to use this driver:
     10           *    1. Implement EnableHCSR04PeriphClock function and turn on clock for used peripherals
     11           *       ex:
     12           *       void EnableHCSR04PeriphClock() {
     13           *         RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
     14           *         RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
     15           *         RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
     16           *      }
     17           *   2. Call InitHCSR04();
     18           *   3. Get distance (in mm) using HCSR04GetDistance function.
     19           *      Value lower than zero means no echo received (distance >3m)
     20           *      Measuring takes about 65ms
     21           *
     22           *   If necessary, change defines above, but be careful, US_ECHO_PIN must be tim ch1
     23           *   and US_TRIG_PIN must be ch3 or ch4. In case of ch4 change TIM_OC3Init into TIM_OC4Init in stm32f10x_HC-SR04.c file
     24           */
     25          
     26          
     27          
     28          /**
     29           * Implement this function. See instruction at the top of this file.
     30           */
     31          

   \                                 In section .text, align 2, keep-with-next
     32          void EnableHCSR04PeriphClock() {
   \                     EnableHCSR04PeriphClock: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
     33              RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
   \        0x2   0x2101             MOVS     R1,#+1
   \        0x4   0x2004             MOVS     R0,#+4
   \        0x6   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     34              RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
   \        0xA   0x2101             MOVS     R1,#+1
   \        0xC   0x2008             MOVS     R0,#+8
   \        0xE   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     35              RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
   \       0x12   0x2101             MOVS     R1,#+1
   \       0x14   0x2002             MOVS     R0,#+2
   \       0x16   0x.... 0x....      BL       RCC_APB1PeriphClockCmd
     36            }
   \       0x1A   0xBD01             POP      {R0,PC}
     37          
     38          /**
     39           * Initialization of HCSR04's peripherals
     40           */
     41          
     42          
     43          /**
     44           * Measure distance and get value in mm. Lower than 0 means no echo signal: distance more than ~3m.
     45           */
     46          
     47          
     48          

   \                                 In section .text, align 2, keep-with-next
     49          static void initMeasureTimer() {
   \                     initMeasureTimer: (+1)
   \        0x0   0xB530             PUSH     {R4,R5,LR}
   \        0x2   0xB08F             SUB      SP,SP,#+60
     50             RCC_ClocksTypeDef RCC_ClocksStatus;
     51             RCC_GetClocksFreq(&RCC_ClocksStatus);
   \        0x4   0xA80A             ADD      R0,SP,#+40
   \        0x6   0x.... 0x....      BL       RCC_GetClocksFreq
     52             uint16_t prescaler = RCC_ClocksStatus.SYSCLK_Frequency / 1000000 - 1; //1 tick = 1us (1 tick = 0.165mm resolution)
   \        0xA   0x980A             LDR      R0,[SP, #+40]
   \        0xC   0x....             LDR.N    R1,??DataTable3
   \        0xE   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \       0x12   0x1E45             SUBS     R5,R0,#+1
     53          
     54             TIM_DeInit(US_TIMER);
   \       0x14   0x....             LDR.N    R4,??DataTable3_1
   \       0x16   0x0020             MOVS     R0,R4
   \       0x18   0x.... 0x....      BL       TIM_DeInit
     55             TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStruct;
     56             TIM_TimeBaseInitStruct.TIM_Prescaler = prescaler;
   \       0x1C   0xF8AD 0x500C      STRH     R5,[SP, #+12]
     57             TIM_TimeBaseInitStruct.TIM_CounterMode = TIM_CounterMode_Up;
   \       0x20   0x2000             MOVS     R0,#+0
   \       0x22   0xF8AD 0x000E      STRH     R0,[SP, #+14]
     58             TIM_TimeBaseInitStruct.TIM_Period = 0xFFFF;
   \       0x26   0xF64F 0x70FF      MOVW     R0,#+65535
   \       0x2A   0xF8AD 0x0010      STRH     R0,[SP, #+16]
     59             TIM_TimeBaseInitStruct.TIM_ClockDivision = TIM_CKD_DIV1;
   \       0x2E   0x2000             MOVS     R0,#+0
   \       0x30   0xF8AD 0x0012      STRH     R0,[SP, #+18]
     60             TIM_TimeBaseInit(US_TIMER, &TIM_TimeBaseInitStruct);
   \       0x34   0xA903             ADD      R1,SP,#+12
   \       0x36   0x0020             MOVS     R0,R4
   \       0x38   0x.... 0x....      BL       TIM_TimeBaseInit
     61          
     62             TIM_OCInitTypeDef TIM_OCInitStruct;
     63             TIM_OCStructInit(&TIM_OCInitStruct);
   \       0x3C   0xA806             ADD      R0,SP,#+24
   \       0x3E   0x.... 0x....      BL       TIM_OCStructInit
     64             TIM_OCInitStruct.TIM_OCMode = TIM_OCMode_PWM1;
   \       0x42   0x2060             MOVS     R0,#+96
   \       0x44   0xF8AD 0x0018      STRH     R0,[SP, #+24]
     65             TIM_OCInitStruct.TIM_OutputState = TIM_OutputState_Enable;
   \       0x48   0x2001             MOVS     R0,#+1
   \       0x4A   0xF8AD 0x001A      STRH     R0,[SP, #+26]
     66             TIM_OCInitStruct.TIM_Pulse = 15; //us
   \       0x4E   0x200F             MOVS     R0,#+15
   \       0x50   0xF8AD 0x001E      STRH     R0,[SP, #+30]
     67             TIM_OCInitStruct.TIM_OCPolarity = TIM_OCPolarity_High;
   \       0x54   0x2000             MOVS     R0,#+0
   \       0x56   0xF8AD 0x0020      STRH     R0,[SP, #+32]
     68             TIM_OC3Init(US_TIMER, &TIM_OCInitStruct);
   \       0x5A   0xA906             ADD      R1,SP,#+24
   \       0x5C   0x0020             MOVS     R0,R4
   \       0x5E   0x.... 0x....      BL       TIM_OC3Init
     69          
     70             TIM_ICInitTypeDef TIM_ICInitStruct;
     71             TIM_ICInitStruct.TIM_Channel = TIM_Channel_1;
   \       0x62   0x2000             MOVS     R0,#+0
   \       0x64   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     72             TIM_ICInitStruct.TIM_ICPolarity = TIM_ICPolarity_Rising;
   \       0x68   0x2000             MOVS     R0,#+0
   \       0x6A   0xF8AD 0x0002      STRH     R0,[SP, #+2]
     73             TIM_ICInitStruct.TIM_ICSelection = TIM_ICSelection_DirectTI;
   \       0x6E   0x2001             MOVS     R0,#+1
   \       0x70   0xF8AD 0x0004      STRH     R0,[SP, #+4]
     74             TIM_ICInitStruct.TIM_ICPrescaler = TIM_ICPSC_DIV1;
   \       0x74   0x2000             MOVS     R0,#+0
   \       0x76   0xF8AD 0x0006      STRH     R0,[SP, #+6]
     75             TIM_ICInitStruct.TIM_ICFilter = 0;
   \       0x7A   0x2000             MOVS     R0,#+0
   \       0x7C   0xF8AD 0x0008      STRH     R0,[SP, #+8]
     76          
     77             TIM_PWMIConfig(US_TIMER, &TIM_ICInitStruct);
   \       0x80   0x4669             MOV      R1,SP
   \       0x82   0x0020             MOVS     R0,R4
   \       0x84   0x.... 0x....      BL       TIM_PWMIConfig
     78             TIM_SelectInputTrigger(US_TIMER, US_TIMER_TRIG_SOURCE);
   \       0x88   0x2150             MOVS     R1,#+80
   \       0x8A   0x0020             MOVS     R0,R4
   \       0x8C   0x.... 0x....      BL       TIM_SelectInputTrigger
     79             TIM_SelectMasterSlaveMode(US_TIMER, TIM_MasterSlaveMode_Enable);
   \       0x90   0x2180             MOVS     R1,#+128
   \       0x92   0x0020             MOVS     R0,R4
   \       0x94   0x.... 0x....      BL       TIM_SelectMasterSlaveMode
     80          
     81             TIM_CtrlPWMOutputs(US_TIMER, ENABLE);
   \       0x98   0x2101             MOVS     R1,#+1
   \       0x9A   0x0020             MOVS     R0,R4
   \       0x9C   0x.... 0x....      BL       TIM_CtrlPWMOutputs
     82          
     83             TIM_ClearFlag(US_TIMER, TIM_FLAG_Update);
   \       0xA0   0x2101             MOVS     R1,#+1
   \       0xA2   0x0020             MOVS     R0,R4
   \       0xA4   0x.... 0x....      BL       TIM_ClearFlag
     84          }
   \       0xA8   0xB00F             ADD      SP,SP,#+60
   \       0xAA   0xBD30             POP      {R4,R5,PC}
     85          

   \                                 In section .text, align 2, keep-with-next
     86          static void initPins() {
   \                     initPins: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
     87             GPIO_InitTypeDef GPIO_InitStructure;
     88             GPIO_InitStructure.GPIO_Pin = US_TRIG_PIN;
   \        0x2   0x2001             MOVS     R0,#+1
   \        0x4   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     89             GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \        0x8   0x2003             MOVS     R0,#+3
   \        0xA   0xF88D 0x0002      STRB     R0,[SP, #+2]
     90             GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
   \        0xE   0x2018             MOVS     R0,#+24
   \       0x10   0xF88D 0x0003      STRB     R0,[SP, #+3]
     91             GPIO_Init(US_TRIG_PORT, &GPIO_InitStructure);
   \       0x14   0x4669             MOV      R1,SP
   \       0x16   0x....             LDR.N    R0,??DataTable3_2
   \       0x18   0x.... 0x....      BL       GPIO_Init
     92          
     93             GPIO_InitStructure.GPIO_Pin = US_ECHO_PIN;
   \       0x1C   0x2040             MOVS     R0,#+64
   \       0x1E   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     94             GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \       0x22   0x2003             MOVS     R0,#+3
   \       0x24   0xF88D 0x0002      STRB     R0,[SP, #+2]
     95             GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   \       0x28   0x2004             MOVS     R0,#+4
   \       0x2A   0xF88D 0x0003      STRB     R0,[SP, #+3]
     96             GPIO_Init(US_ECHO_PORT, &GPIO_InitStructure);
   \       0x2E   0x4669             MOV      R1,SP
   \       0x30   0x....             LDR.N    R0,??DataTable3_3
   \       0x32   0x.... 0x....      BL       GPIO_Init
     97          }
   \       0x36   0xBD01             POP      {R0,PC}
     98          

   \                                 In section .text, align 2, keep-with-next
     99          void InitHCSR04() {
   \                     InitHCSR04: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    100             EnableHCSR04PeriphClock();
   \        0x2   0x.... 0x....      BL       EnableHCSR04PeriphClock
    101             initPins();
   \        0x6   0x.... 0x....      BL       initPins
    102             initMeasureTimer();
   \        0xA   0x.... 0x....      BL       initMeasureTimer
    103          }
   \        0xE   0xBD01             POP      {R0,PC}
    104          

   \                                 In section .text, align 2, keep-with-next
    105          int32_t HCSR04GetDistance() {
   \                     HCSR04GetDistance: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
    106             (US_TIMER)->CNT = 0;
   \        0x2   0x2000             MOVS     R0,#+0
   \        0x4   0x....             LDR.N    R1,??DataTable3_4
   \        0x6   0x8008             STRH     R0,[R1, #+0]
    107             TIM_Cmd(US_TIMER, ENABLE);
   \        0x8   0x....             LDR.N    R4,??DataTable3_1
   \        0xA   0x2101             MOVS     R1,#+1
   \        0xC   0x0020             MOVS     R0,R4
   \        0xE   0x.... 0x....      BL       TIM_Cmd
    108             while(!TIM_GetFlagStatus(US_TIMER, TIM_FLAG_Update));
   \                     ??HCSR04GetDistance_0: (+1)
   \       0x12   0x2101             MOVS     R1,#+1
   \       0x14   0x0020             MOVS     R0,R4
   \       0x16   0x.... 0x....      BL       TIM_GetFlagStatus
   \       0x1A   0x2800             CMP      R0,#+0
   \       0x1C   0xD0F9             BEQ.N    ??HCSR04GetDistance_0
    109             TIM_Cmd(US_TIMER, DISABLE);
   \       0x1E   0x2100             MOVS     R1,#+0
   \       0x20   0x0020             MOVS     R0,R4
   \       0x22   0x.... 0x....      BL       TIM_Cmd
    110             TIM_ClearFlag(US_TIMER, TIM_FLAG_Update);
   \       0x26   0x2101             MOVS     R1,#+1
   \       0x28   0x0020             MOVS     R0,R4
   \       0x2A   0x.... 0x....      BL       TIM_ClearFlag
    111             return (TIM_GetCapture2(US_TIMER)-TIM_GetCapture1(US_TIMER))*165/1000;
   \       0x2E   0x0020             MOVS     R0,R4
   \       0x30   0x.... 0x....      BL       TIM_GetCapture2
   \       0x34   0x0005             MOVS     R5,R0
   \       0x36   0xB2AD             UXTH     R5,R5
   \       0x38   0x0020             MOVS     R0,R4
   \       0x3A   0x.... 0x....      BL       TIM_GetCapture1
   \       0x3E   0x1A2D             SUBS     R5,R5,R0
   \       0x40   0x20A5             MOVS     R0,#+165
   \       0x42   0x4345             MULS     R5,R0,R5
   \       0x44   0xF44F 0x707A      MOV      R0,#+1000
   \       0x48   0xFB95 0xF0F0      SDIV     R0,R5,R0
   \       0x4C   0xBD32             POP      {R1,R4,R5,PC}
    112          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \        0x0   0x000F'4240        DC32     0xf4240

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \        0x0   0x4000'0400        DC32     0x40000400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \        0x0   0x4001'0C00        DC32     0x40010c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \        0x0   0x4001'0800        DC32     0x40010800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \        0x0   0x4000'0424        DC32     0x40000424

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   EnableHCSR04PeriphClock
         8   -> RCC_APB1PeriphClockCmd
         8   -> RCC_APB2PeriphClockCmd
      16   HCSR04GetDistance
        16   -> TIM_ClearFlag
        16   -> TIM_Cmd
        16   -> TIM_GetCapture1
        16   -> TIM_GetCapture2
        16   -> TIM_GetFlagStatus
       8   InitHCSR04
         8   -> EnableHCSR04PeriphClock
         8   -> initMeasureTimer
         8   -> initPins
      72   initMeasureTimer
        72   -> RCC_GetClocksFreq
        72   -> TIM_ClearFlag
        72   -> TIM_CtrlPWMOutputs
        72   -> TIM_DeInit
        72   -> TIM_OC3Init
        72   -> TIM_OCStructInit
        72   -> TIM_PWMIConfig
        72   -> TIM_SelectInputTrigger
        72   -> TIM_SelectMasterSlaveMode
        72   -> TIM_TimeBaseInit
       8   initPins
         8   -> GPIO_Init


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
      28  EnableHCSR04PeriphClock
      78  HCSR04GetDistance
      16  InitHCSR04
     172  initMeasureTimer
      56  initPins

 
 370 bytes in section .text
 
 370 bytes of CODE memory

Errors: none
Warnings: none
